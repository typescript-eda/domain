#+TITLE: The Foundation of Events: A Domain Story
#+SUBTITLE: How Pure Domain Logic Transforms Software Architecture
#+AUTHOR: TypeScript-EDA Domain Team
#+DATE: 2025-07-03
#+LAYOUT: project
#+PROJECT: typescript-eda-domain

* Prologue: In Search of the Core

In the beginning, there was chaos. Business logic scattered across controllers, services, and utilities. Database concerns mixed with business rules. UI logic tangled with domain knowledge. Developers struggled to find the essence of what their software was truly meant to accomplish.

#+BEGIN_QUOTE
"At the heart of all software lies a domain—a sphere of knowledge and activity around which the application logic revolves. Everything else is just machinery."
#+END_QUOTE

This is the story of how we discovered that domain, extracted its essence, and built a foundation that could support any application architecture.

* Chapter 1: The Awakening - Discovering Domain-Driven Design

** The Problem: Lost in Translation

In the old days, conversations between business experts and developers sounded like this:

*Business Expert*: "When a customer places an order, we need to check inventory, reserve items, calculate shipping, and send a confirmation."

*Developer*: "So you want a POST endpoint that calls the inventory service, updates the database, integrates with the shipping API, and triggers the email system?"

The translation was losing the essence. Business concepts became technical implementations, and the domain knowledge was scattered across technical concerns.

** The Revelation: Ubiquitous Language

The breakthrough came with a simple realization: what if the code spoke the same language as the business?

#+BEGIN_SRC typescript
// Instead of technical jargon...
orderService.processOrder(orderData);

// We could have business language...
await customer.placeOrder(order);
await inventory.reserveItems(order.items);
await order.calculateShipping(customer.address);
await order.confirm();
#+END_SRC

This was the birth of *ubiquitous language*—a shared vocabulary that could be understood by both business experts and developers.

* Chapter 2: The Entities Emerge - Objects with Identity and Behavior

** Beyond Data Structures

Traditional programming taught us to think of objects as data structures with attached methods. But domain entities are different—they have *identity*, *behavior*, and *lifecycle*.

#+BEGIN_SRC typescript
// A data structure (anemic)
interface User {
  id: string;
  email: string;
  name: string;
}

// A domain entity (rich)
export class User extends Entity<UserId> {
  constructor(
    id: UserId,
    private email: Email,
    private name: UserName,
    private status: UserStatus
  ) {
    super(id);
  }

  public changeEmail(newEmail: Email): UserEmailChanged {
    if (this.status.isActive()) {
      this.email = newEmail;
      return new UserEmailChanged(this.id, newEmail);
    }
    throw new InvalidOperationError('Cannot change email for inactive user');
  }
}
#+END_SRC

** The Power of Identity

Entities have identity that transcends their attributes. A User remains the same User even if they change their email, name, or address. This identity is what makes entities meaningful in the business domain.

#+BEGIN_SRC typescript
export abstract class Entity<T extends ValueObject> {
  constructor(protected readonly _id: T) {}

  public get id(): T {
    return this._id;
  }

  public equals(other: Entity<T>): boolean {
    return this._id.equals(other._id);
  }

  // Identity-based equality, not structural equality
  protected sameIdentityAs(other: Entity<T>): boolean {
    return this._id.equals(other._id);
  }
}
#+END_SRC

* Chapter 3: The Value Objects - Immutable Concepts

** Values vs. Entities

While entities have identity, value objects are defined entirely by their attributes. Two Email objects with the same address are identical and interchangeable.

#+BEGIN_SRC typescript
export class Email extends ValueObject {
  constructor(private readonly value: string) {
    super();
    this.validate(value);
  }

  private validate(email: string): void {
    if (!this.isValidEmailFormat(email)) {
      throw new InvalidEmailError(email);
    }
  }

  public getValue(): string {
    return this.value;
  }

  protected getEqualityComponents(): unknown[] {
    return [this.value];
  }

  private isValidEmailFormat(email: string): boolean {
    // Business rules for email validation
    return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
  }
}
#+END_SRC

** Encapsulating Business Rules

Value objects became the guardians of business rules. An Email object cannot exist in an invalid state. A Money object ensures currency consistency. A DateRange validates that end dates come after start dates.

#+BEGIN_SRC typescript
export class Money extends ValueObject {
  constructor(
    private readonly amount: number,
    private readonly currency: Currency
  ) {
    super();
    if (amount < 0) {
      throw new InvalidAmountError('Amount cannot be negative');
    }
  }

  public add(other: Money): Money {
    if (!this.currency.equals(other.currency)) {
      throw new CurrencyMismatchError(this.currency, other.currency);
    }
    return new Money(this.amount + other.amount, this.currency);
  }

  protected getEqualityComponents(): unknown[] {
    return [this.amount, this.currency];
  }
}
#+END_SRC

* Chapter 4: The Events - Capturing What Happened

** From State Changes to Domain Events

Traditional systems focused on current state. Event-driven systems focus on *what happened*. Events became the memory of the domain, capturing every significant business occurrence.

#+BEGIN_SRC typescript
export abstract class Event {
  public abstract readonly type: string;
  public readonly timestamp: Date;
  public readonly id: string;

  constructor() {
    this.timestamp = new Date();
    this.id = this.generateEventId();
  }

  public abstract toJSON(): Record<string, unknown>;

  private generateEventId(): string {
    return `evt-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
  }
}

export class UserEmailChanged extends Event {
  public readonly type = 'UserEmailChanged';

  constructor(
    public readonly userId: UserId,
    public readonly newEmail: Email,
    public readonly previousEmail: Email
  ) {
    super();
  }

  public toJSON(): Record<string, unknown> {
    return {
      type: this.type,
      userId: this.userId.getValue(),
      newEmail: this.newEmail.getValue(),
      previousEmail: this.previousEmail.getValue(),
      timestamp: this.timestamp.toISOString(),
      id: this.id
    };
  }
}
#+END_SRC

** The Language of Change

Events formed a vocabulary for describing change in the domain:
- `OrderPlaced` - A customer committed to a purchase
- `PaymentProcessed` - Money changed hands
- `ItemsShipped` - Physical goods left the warehouse
- `UserRegistered` - A new person joined the system

Each event told a story of what the business accomplished.

* Chapter 5: The Decorators - Connecting Events to Behavior

** The @listen Revolution

The breakthrough came with the `@listen` decorator, which connected domain events to entity behavior in a declarative way:

#+BEGIN_SRC typescript
export class Order extends Entity<OrderId> {
  @listen(PaymentProcessed)
  public async markAsPaid(event: PaymentProcessed): Promise<OrderMarkedAsPaid> {
    if (!this.id.equals(event.orderId)) {
      return; // Not for this order
    }

    this.status = OrderStatus.PAID;
    return new OrderMarkedAsPaid(this.id, event.paymentId);
  }

  @listen(ItemsShipped)
  public async markAsShipped(event: ItemsShipped): Promise<OrderShipped> {
    if (!this.id.equals(event.orderId)) {
      return; // Not for this order
    }

    this.status = OrderStatus.SHIPPED;
    this.trackingNumber = event.trackingNumber;
    return new OrderShipped(this.id, event.trackingNumber);
  }
}
#+END_SRC

** Decoupled yet Coordinated

The `@listen` decorator achieved something remarkable: it allowed entities to respond to events without knowing who emitted them. An Order could respond to PaymentProcessed events without knowing anything about the payment system.

#+BEGIN_SRC typescript
// The listen decorator implementation
export function listen(eventType: new (...args: any[]) => Event) {
  return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {
    // Register this method as a listener for the event type
    const listeners = Reflect.getMetadata('event:listeners', target.constructor) || [];
    listeners.push({
      eventType: eventType.name,
      method: propertyKey,
      handler: descriptor.value
    });
    Reflect.defineMetadata('event:listeners', listeners, target.constructor);
  };
}
#+END_SRC

* Chapter 6: The Repositories - Guardians of Persistence

** Pure Abstractions

Repositories provided a domain-friendly interface to persistence without coupling the domain to specific storage technologies:

#+BEGIN_SRC typescript
export abstract class Repository<T extends Entity<any>, ID extends ValueObject> {
  public abstract findById(id: ID): Promise<T | null>;
  public abstract save(entity: T): Promise<void>;
  public abstract delete(id: ID): Promise<void>;
  public abstract findAll(): Promise<T[]>;
}

// Domain-specific repository
export abstract class UserRepository extends Repository<User, UserId> {
  public abstract findByEmail(email: Email): Promise<User | null>;
  public abstract findActiveUsers(): Promise<User[]>;
  public abstract findUsersByRole(role: UserRole): Promise<User[]>;
}
#+END_SRC

** Domain Language in Persistence

Repositories spoke the domain language, not database language:

#+BEGIN_SRC typescript
// Domain-focused interface
const user = await userRepository.findByEmail(new Email('john@example.com'));
const activeUsers = await userRepository.findActiveUsers();

// Not database-focused
const user = await userRepository.findOne({ email: 'john@example.com' });
const activeUsers = await userRepository.find({ status: 'active' });
#+END_SRC

* Chapter 7: The Ports - Boundaries of the Domain

** Clean Boundaries

Ports defined clean boundaries between the domain and the outside world:

#+BEGIN_SRC typescript
export abstract class Port {
  public abstract readonly name: string;
  
  protected constructor() {}

  public abstract initialize(): Promise<void>;
  public abstract shutdown(): Promise<void>;
  public abstract isHealthy(): Promise<boolean>;
}

// Example port for external notifications
export abstract class NotificationPort extends Port {
  public readonly name = 'NotificationPort';

  public abstract sendEmail(to: Email, subject: string, body: string): Promise<void>;
  public abstract sendSMS(to: PhoneNumber, message: string): Promise<void>;
}
#+END_SRC

** Dependency Inversion in Practice

The domain defined what it needed (ports), but didn't know how those needs were fulfilled (adapters). This was dependency inversion at its finest.

#+BEGIN_SRC typescript
export class User extends Entity<UserId> {
  @listen(UserRegistered)
  public async sendWelcomeNotification(
    event: UserRegistered,
    notificationPort: NotificationPort
  ): Promise<NotificationSent> {
    // Domain logic: what notification to send
    const welcomeMessage = this.generateWelcomeMessage();
    
    // Infrastructure concern: how to send it
    await notificationPort.sendEmail(
      event.email,
      'Welcome!',
      welcomeMessage
    );

    return new NotificationSent(event.userId, 'welcome_email');
  }
}
#+END_SRC

* Chapter 8: The Patterns Emerge - A Language of Design

** Consistent Patterns

Over time, patterns emerged that made domain modeling predictable and learnable:

1. **Entities** encapsulate identity and business behavior
2. **Value Objects** encapsulate business rules and invariants
3. **Events** capture domain occurrences and drive behavior
4. **Repositories** provide domain-friendly persistence
5. **Ports** define boundaries with external systems

** The Domain Model as Documentation

The domain model became living documentation:

#+BEGIN_SRC typescript
export class Subscription extends Entity<SubscriptionId> {
  constructor(
    id: SubscriptionId,
    private customerId: CustomerId,
    private plan: SubscriptionPlan,
    private billingCycle: BillingCycle,
    private status: SubscriptionStatus
  ) {
    super(id);
  }

  @listen(PaymentFailed)
  public async handlePaymentFailure(event: PaymentFailed): Promise<SubscriptionSuspended> {
    if (!this.belongsToCustomer(event.customerId)) {
      return; // Not our customer
    }

    // Business rule: suspend after 3 failed payments
    if (event.failureCount >= 3) {
      this.status = SubscriptionStatus.SUSPENDED;
      return new SubscriptionSuspended(this.id, event.reason);
    }
  }

  // This method documents a business rule clearly
  private belongsToCustomer(customerId: CustomerId): boolean {
    return this.customerId.equals(customerId);
  }
}
#+END_SRC

* Chapter 9: The Testing Revolution - Domain-Focused Testing

** Testing Business Logic Directly

Domain-focused design made testing business logic straightforward:

#+BEGIN_SRC typescript
describe('User Domain', () => {
  it('should change email when user is active', () => {
    // Given: An active user
    const user = new User(
      new UserId('123'),
      new Email('old@example.com'),
      new UserName('John Doe'),
      UserStatus.ACTIVE
    );

    // When: Email is changed
    const event = user.changeEmail(new Email('new@example.com'));

    // Then: Event is emitted
    expect(event).toBeInstanceOf(UserEmailChanged);
    expect(event.newEmail.getValue()).toBe('new@example.com');
  });

  it('should not allow email change when user is inactive', () => {
    // Given: An inactive user
    const user = new User(
      new UserId('123'),
      new Email('old@example.com'),
      new UserName('John Doe'),
      UserStatus.INACTIVE
    );

    // When/Then: Email change should fail
    expect(() => {
      user.changeEmail(new Email('new@example.com'));
    }).toThrow(InvalidOperationError);
  });
});
#+END_SRC

** Event-Driven Testing

Testing event handling became declarative:

#+BEGIN_SRC typescript
describe('Order Event Handling', () => {
  it('should mark order as paid when payment is processed', async () => {
    // Given: An unpaid order
    const order = new Order(orderId, customerId, OrderStatus.PENDING);

    // When: Payment is processed
    const paymentEvent = new PaymentProcessed(orderId, paymentId, amount);
    const result = await order.markAsPaid(paymentEvent);

    // Then: Order is marked as paid
    expect(result).toBeInstanceOf(OrderMarkedAsPaid);
    expect(order.status).toBe(OrderStatus.PAID);
  });
});
#+END_SRC

* Chapter 10: The Legacy - A Foundation for All Applications

** Universal Patterns

The domain layer patterns proved universal. Whether building:
- E-commerce platforms
- Financial systems  
- Content management systems
- IoT applications
- AI automation tools

The same patterns applied:
- Entities with identity and behavior
- Value objects with business rules
- Events capturing domain occurrences
- Repositories providing persistence
- Ports defining boundaries

** The Framework Effect

This domain foundation enabled higher-level frameworks:
- **TypeScript-EDA Infrastructure**: Adapters and external integrations
- **TypeScript-EDA Application**: Orchestration and dependency injection
- **Web-Buddy**: Event-driven web automation
- **ChatGPT-Buddy**: AI-powered automation on domain foundations

** For the Developer

Working with pure domain logic provided:
- *Clarity*: Business rules expressed clearly in code
- *Testability*: Direct testing of business logic
- *Maintainability*: Changes isolated to appropriate layers
- *Reusability*: Domain logic independent of infrastructure

** For the Business

Domain-driven development delivered:
- *Alignment*: Code that matched business understanding
- *Agility*: Fast response to changing business requirements  
- *Quality*: Fewer bugs in business-critical logic
- *Documentation*: Code that served as business documentation

* Epilogue: The Living Foundation

** Beyond Code Structure

The TypeScript-EDA domain layer became more than a code organization strategy. It became a way of thinking about software that put business value at the center.

#+BEGIN_QUOTE
"Good domain design is not about the technologies we use or the patterns we follow. It's about understanding the business deeply enough to model it clearly in code."
#+END_QUOTE

** The Continuous Journey

Domain modeling is never finished. As businesses evolve, domains evolve. The patterns and tools provided by TypeScript-EDA Domain give developers the foundation to evolve their models while maintaining clarity and consistency.

** The Developer's Wisdom

Every developer who masters domain-driven design discovers the same truth: when the domain is modeled clearly, everything else becomes easier. Tests are clearer. Features are easier to add. Bugs are easier to find. Code becomes maintainable.

The domain layer is where complexity goes to become simple, where business rules find their home, and where software finally makes sense.

**This is the foundation. Everything else is built upon it.**